import { RRule, Day, Options } from "./rrule";

function flatten<T>(arr: T[]): T[] {
    return arr.reduce<T[]>((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);
}

function id(x: any[]): any {
    return x[0];
}

function joiner(d: any[]): string {
    return d.join("");
}

function arrconcat(d: any[]): any[] {
    return [d[0]].concat(d[1]);
}

function noresult(): void {
    return undefined;
}

function integer(d: string[]): number {
    return parseInt(d.join(""), 10);
}

function rrule(data: any[]): RRule {
    let options = {};
    data[3].forEach((recurRule: any[]) => {
        options[recurRule[0]] = recurRule[1];
    });

    return new RRule(options as Options);
}

export const ParserRules = [
    {"name": "rrule$string$1", "symbols": [{"literal":"R"}, {"literal":"R"}, {"literal":"U"}, {"literal":"L"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rrule$ebnf$1", "symbols": ["CRLF"], "postprocess": id},
    {"name": "rrule$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "rrule", "symbols": ["rrule$string$1", "rrulparam", {"literal":":"}, "recur", "rrule$ebnf$1"], "postprocess": rrule},
    {"name": "rrulparam$ebnf$1", "symbols": []},
    {"name": "rrulparam$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "otherParam"]},
    {"name": "rrulparam$ebnf$1", "symbols": ["rrulparam$ebnf$1", "rrulparam$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "rrulparam", "symbols": ["rrulparam$ebnf$1"]},
    {"name": "otherParam", "symbols": ["ianaParam"]},
    {"name": "otherParam", "symbols": ["xParam"]},
    {"name": "ianaParam$ebnf$1", "symbols": []},
    {"name": "ianaParam$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "paramValue"]},
    {"name": "ianaParam$ebnf$1", "symbols": ["ianaParam$ebnf$1", "ianaParam$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ianaParam", "symbols": ["ianaToken", {"literal":"="}, "paramValue", "ianaParam$ebnf$1"]},
    {"name": "ianaToken$ebnf$1$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "ianaToken$ebnf$1$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "ianaToken$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "ianaToken$ebnf$1", "symbols": ["ianaToken$ebnf$1$subexpression$1"]},
    {"name": "ianaToken$ebnf$1$subexpression$2", "symbols": ["ALPHA"]},
    {"name": "ianaToken$ebnf$1$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "ianaToken$ebnf$1$subexpression$2", "symbols": [{"literal":"-"}]},
    {"name": "ianaToken$ebnf$1", "symbols": ["ianaToken$ebnf$1", "ianaToken$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ianaToken", "symbols": ["ianaToken$ebnf$1"]},
    {"name": "paramValue", "symbols": ["paramtext"]},
    {"name": "paramValue", "symbols": ["quotedString"]},
    {"name": "paramtext$ebnf$1", "symbols": []},
    {"name": "paramtext$ebnf$1", "symbols": ["paramtext$ebnf$1", "SAFECHAR"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "paramtext", "symbols": ["paramtext$ebnf$1"]},
    {"name": "quotedString$ebnf$1", "symbols": []},
    {"name": "quotedString$ebnf$1", "symbols": ["quotedString$ebnf$1", "QSAFECHAR"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "quotedString", "symbols": ["DQUOTE", "quotedString$ebnf$1", "DQUOTE"]},
    {"name": "xParam$ebnf$1", "symbols": []},
    {"name": "xParam$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "paramValue"]},
    {"name": "xParam$ebnf$1", "symbols": ["xParam$ebnf$1", "xParam$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "xParam", "symbols": ["xName", {"literal":"="}, "paramValue", "xParam$ebnf$1"]},
    {"name": "xName$string$1", "symbols": [{"literal":"X"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "xName$ebnf$1$subexpression$1", "symbols": ["vendorid", {"literal":"-"}]},
    {"name": "xName$ebnf$1", "symbols": ["xName$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "xName$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "xName$ebnf$2$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "xName$ebnf$2$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "xName$ebnf$2$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "xName$ebnf$2", "symbols": ["xName$ebnf$2$subexpression$1"]},
    {"name": "xName$ebnf$2$subexpression$2", "symbols": ["ALPHA"]},
    {"name": "xName$ebnf$2$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "xName$ebnf$2$subexpression$2", "symbols": [{"literal":"-"}]},
    {"name": "xName$ebnf$2", "symbols": ["xName$ebnf$2", "xName$ebnf$2$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "xName", "symbols": ["xName$string$1", "xName$ebnf$1", "xName$ebnf$2"]},
    {"name": "vendorid$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "vendorid$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "vendorid$subexpression$2", "symbols": ["ALPHA"]},
    {"name": "vendorid$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "vendorid$ebnf$1$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "vendorid$ebnf$1$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "vendorid$ebnf$1", "symbols": ["vendorid$ebnf$1$subexpression$1"]},
    {"name": "vendorid$ebnf$1$subexpression$2", "symbols": ["ALPHA"]},
    {"name": "vendorid$ebnf$1$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "vendorid$ebnf$1", "symbols": ["vendorid$ebnf$1", "vendorid$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "vendorid", "symbols": ["vendorid$subexpression$1", "vendorid$subexpression$2", "vendorid$ebnf$1"]},
    {"name": "recur$ebnf$1", "symbols": []},
    {"name": "recur$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "recurRulePart"]},
    {"name": "recur$ebnf$1", "symbols": ["recur$ebnf$1", "recur$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "recur", "symbols": ["recurRulePart", "recur$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "recurRulePart$string$1", "symbols": [{"literal":"F"}, {"literal":"R"}, {"literal":"E"}, {"literal":"Q"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$1", {"literal":"="}, "freq"], "postprocess": (data: any[]) => [ "frequency", data[2][0].toLowerCase()]},
    {"name": "recurRulePart$string$2", "symbols": [{"literal":"U"}, {"literal":"N"}, {"literal":"T"}, {"literal":"I"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$2", {"literal":"="}, "enddate"], "postprocess": (data: any[]) => [ "until", data[2][0]]},
    {"name": "recurRulePart$string$3", "symbols": [{"literal":"C"}, {"literal":"O"}, {"literal":"U"}, {"literal":"N"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart$ebnf$1", "symbols": ["DIGIT"]},
    {"name": "recurRulePart$ebnf$1", "symbols": ["recurRulePart$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$3", {"literal":"="}, "recurRulePart$ebnf$1"], "postprocess": (data: any[]) => [ "count", parseInt(data[2].join(""), 10) ]},
    {"name": "recurRulePart$string$4", "symbols": [{"literal":"I"}, {"literal":"N"}, {"literal":"T"}, {"literal":"E"}, {"literal":"R"}, {"literal":"V"}, {"literal":"A"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart$ebnf$2", "symbols": ["DIGIT"]},
    {"name": "recurRulePart$ebnf$2", "symbols": ["recurRulePart$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$4", {"literal":"="}, "recurRulePart$ebnf$2"], "postprocess": (data: any[]) => [ "interval", parseInt(data[2].join(""), 10) ]},
    {"name": "recurRulePart$string$5", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"S"}, {"literal":"E"}, {"literal":"C"}, {"literal":"O"}, {"literal":"N"}, {"literal":"D"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$5", {"literal":"="}, "byseclist"], "postprocess": (data: any[]) => [ "bySecond", data[2] ]},
    {"name": "recurRulePart$string$6", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"M"}, {"literal":"I"}, {"literal":"N"}, {"literal":"U"}, {"literal":"T"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$6", {"literal":"="}, "byminlist"], "postprocess": (data: any[]) => [ "byMinute", data[2] ]},
    {"name": "recurRulePart$string$7", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"H"}, {"literal":"O"}, {"literal":"U"}, {"literal":"R"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$7", {"literal":"="}, "byhrlist"], "postprocess": (data: any[]) => [ "byHour",   data[2] ]},
    {"name": "recurRulePart$string$8", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"D"}, {"literal":"A"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$8", {"literal":"="}, "bywdaylist"], "postprocess": (data: any[]) => [ "byDay",   data[2] ]},
    {"name": "recurRulePart$string$9", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"M"}, {"literal":"O"}, {"literal":"N"}, {"literal":"T"}, {"literal":"H"}, {"literal":"D"}, {"literal":"A"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$9", {"literal":"="}, "bymodaylist"], "postprocess": (data: any[]) => [ "byMonthDay",   data[2] ]},
    {"name": "recurRulePart$string$10", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"Y"}, {"literal":"E"}, {"literal":"A"}, {"literal":"R"}, {"literal":"D"}, {"literal":"A"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$10", {"literal":"="}, "byyrdaylist"], "postprocess": (data: any[]) => [ "byYearDay",   data[2] ]},
    {"name": "recurRulePart$string$11", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"W"}, {"literal":"E"}, {"literal":"E"}, {"literal":"K"}, {"literal":"N"}, {"literal":"O"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$11", {"literal":"="}, "bywknolist"], "postprocess": (data: any[]) => [ "byWeekNumber",   data[2] ]},
    {"name": "recurRulePart$string$12", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"M"}, {"literal":"O"}, {"literal":"N"}, {"literal":"T"}, {"literal":"H"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$12", {"literal":"="}, "bymolist"], "postprocess": (data: any[]) => [ "byMonth",   data[2] ]},
    {"name": "recurRulePart$string$13", "symbols": [{"literal":"B"}, {"literal":"Y"}, {"literal":"S"}, {"literal":"E"}, {"literal":"T"}, {"literal":"P"}, {"literal":"O"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$13", {"literal":"="}, "bysplist"], "postprocess": (data: any[]) => [ "bySetPosition",   data[2] ]},
    {"name": "recurRulePart$string$14", "symbols": [{"literal":"W"}, {"literal":"K"}, {"literal":"S"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "recurRulePart", "symbols": ["recurRulePart$string$14", {"literal":"="}, "weekday"], "postprocess": (data: any[]) => [ "weekStart",   data[2] ]},
    {"name": "freq$string$1", "symbols": [{"literal":"S"}, {"literal":"E"}, {"literal":"C"}, {"literal":"O"}, {"literal":"N"}, {"literal":"D"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$1"]},
    {"name": "freq$string$2", "symbols": [{"literal":"M"}, {"literal":"I"}, {"literal":"N"}, {"literal":"U"}, {"literal":"T"}, {"literal":"E"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$2"]},
    {"name": "freq$string$3", "symbols": [{"literal":"H"}, {"literal":"O"}, {"literal":"U"}, {"literal":"R"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$3"]},
    {"name": "freq$string$4", "symbols": [{"literal":"D"}, {"literal":"A"}, {"literal":"I"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$4"]},
    {"name": "freq$string$5", "symbols": [{"literal":"W"}, {"literal":"E"}, {"literal":"E"}, {"literal":"K"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$5"]},
    {"name": "freq$string$6", "symbols": [{"literal":"M"}, {"literal":"O"}, {"literal":"N"}, {"literal":"T"}, {"literal":"H"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$6"]},
    {"name": "freq$string$7", "symbols": [{"literal":"Y"}, {"literal":"E"}, {"literal":"A"}, {"literal":"R"}, {"literal":"L"}, {"literal":"Y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "freq", "symbols": ["freq$string$7"]},
    {"name": "enddate", "symbols": ["date"]},
    {"name": "enddate", "symbols": ["dateTime"]},
    {"name": "date", "symbols": ["dateValue"], "postprocess": (d: any) => new Date(d[0][0], d[0][1], d[0][2])},
    {"name": "dateValue", "symbols": ["dateFullyear", "dateMonth", "dateMday"]},
    {"name": "dateFullyear", "symbols": ["DIGIT", "DIGIT", "DIGIT", "DIGIT"], "postprocess": integer},
    {"name": "dateMonth", "symbols": ["DIGIT", "DIGIT"], "postprocess": (d: any) => (integer(d) - 1)},
    {"name": "dateMday", "symbols": ["DIGIT", "DIGIT"], "postprocess": integer},
    {"name": "dateTime", "symbols": ["dateValue", {"literal":"T"}, "time"], "postprocess":  (d: any) => {
            if (d[2][3]) {
                return new Date(Date.UTC(d[0][0], d[0][1], d[0][2], d[2][0], d[2][1], d[2][2]));
            }

            return new Date(d[0][0], d[0][1], d[0][2], d[2][0], d[2][1], d[2][2]);
        } },
    {"name": "time$ebnf$1", "symbols": ["timeUTC"], "postprocess": id},
    {"name": "time$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "time", "symbols": ["timeHour", "timeMinute", "timeSecond", "time$ebnf$1"]},
    {"name": "timeHour", "symbols": ["DIGIT", "DIGIT"], "postprocess": integer},
    {"name": "timeMinute", "symbols": ["DIGIT", "DIGIT"], "postprocess": integer},
    {"name": "timeSecond", "symbols": ["DIGIT", "DIGIT"], "postprocess": integer},
    {"name": "timeUTC", "symbols": [{"literal":"Z"}], "postprocess": () => true},
    {"name": "byseclist$ebnf$1", "symbols": []},
    {"name": "byseclist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "seconds"]},
    {"name": "byseclist$ebnf$1", "symbols": ["byseclist$ebnf$1", "byseclist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "byseclist", "symbols": ["seconds", "byseclist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "seconds$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "seconds$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "seconds", "symbols": ["DIGIT", "seconds$ebnf$1"], "postprocess": integer},
    {"name": "byminlist$ebnf$1", "symbols": []},
    {"name": "byminlist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "minutes"]},
    {"name": "byminlist$ebnf$1", "symbols": ["byminlist$ebnf$1", "byminlist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "byminlist", "symbols": ["minutes", "byminlist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "minutes$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "minutes$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "minutes", "symbols": ["DIGIT", "minutes$ebnf$1"], "postprocess": integer},
    {"name": "byhrlist$ebnf$1", "symbols": []},
    {"name": "byhrlist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "hour"]},
    {"name": "byhrlist$ebnf$1", "symbols": ["byhrlist$ebnf$1", "byhrlist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "byhrlist", "symbols": ["hour", "byhrlist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "hour$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "hour$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "hour", "symbols": ["DIGIT", "hour$ebnf$1"], "postprocess": integer},
    {"name": "bywdaylist$ebnf$1", "symbols": []},
    {"name": "bywdaylist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "weekdaynum"]},
    {"name": "bywdaylist$ebnf$1", "symbols": ["bywdaylist$ebnf$1", "bywdaylist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bywdaylist", "symbols": ["weekdaynum", "bywdaylist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "weekdaynum$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["plus"]},
    {"name": "weekdaynum$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["minus"]},
    {"name": "weekdaynum$ebnf$1$subexpression$1$ebnf$1", "symbols": ["weekdaynum$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "weekdaynum$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "weekdaynum$ebnf$1$subexpression$1", "symbols": ["weekdaynum$ebnf$1$subexpression$1$ebnf$1", "ordwk"]},
    {"name": "weekdaynum$ebnf$1", "symbols": ["weekdaynum$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "weekdaynum$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "weekdaynum", "symbols": ["weekdaynum$ebnf$1", "weekday"], "postprocess":
        (data: any[]) => new Day(data[1], data[0] ? integer(flatten<string>(data[0])) : undefined)
            },
    {"name": "plus", "symbols": [{"literal":"+"}]},
    {"name": "minus", "symbols": [{"literal":"-"}]},
    {"name": "ordwk$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "ordwk$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordwk", "symbols": ["DIGIT", "ordwk$ebnf$1"]},
    {"name": "weekday$string$1", "symbols": [{"literal":"S"}, {"literal":"U"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$1"], "postprocess": () => 0},
    {"name": "weekday$string$2", "symbols": [{"literal":"M"}, {"literal":"O"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$2"], "postprocess": () => 1},
    {"name": "weekday$string$3", "symbols": [{"literal":"T"}, {"literal":"U"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$3"], "postprocess": () => 2},
    {"name": "weekday$string$4", "symbols": [{"literal":"W"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$4"], "postprocess": () => 3},
    {"name": "weekday$string$5", "symbols": [{"literal":"T"}, {"literal":"H"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$5"], "postprocess": () => 4},
    {"name": "weekday$string$6", "symbols": [{"literal":"F"}, {"literal":"R"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$6"], "postprocess": () => 5},
    {"name": "weekday$string$7", "symbols": [{"literal":"S"}, {"literal":"A"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "weekday", "symbols": ["weekday$string$7"], "postprocess": () => 6},
    {"name": "bymodaylist$ebnf$1", "symbols": []},
    {"name": "bymodaylist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "monthdaynum"]},
    {"name": "bymodaylist$ebnf$1", "symbols": ["bymodaylist$ebnf$1", "bymodaylist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bymodaylist", "symbols": ["monthdaynum", "bymodaylist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "monthdaynum$ebnf$1$subexpression$1", "symbols": ["plus"]},
    {"name": "monthdaynum$ebnf$1$subexpression$1", "symbols": ["minus"]},
    {"name": "monthdaynum$ebnf$1", "symbols": ["monthdaynum$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "monthdaynum$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "monthdaynum", "symbols": ["monthdaynum$ebnf$1", "ordmoday"], "postprocess": integer},
    {"name": "ordmoday$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "ordmoday$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordmoday", "symbols": ["DIGIT", "ordmoday$ebnf$1"], "postprocess": integer},
    {"name": "byyrdaylist$ebnf$1", "symbols": []},
    {"name": "byyrdaylist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "yeardaynum"]},
    {"name": "byyrdaylist$ebnf$1", "symbols": ["byyrdaylist$ebnf$1", "byyrdaylist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "byyrdaylist", "symbols": ["yeardaynum", "byyrdaylist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "yeardaynum$ebnf$1$subexpression$1", "symbols": ["plus"]},
    {"name": "yeardaynum$ebnf$1$subexpression$1", "symbols": ["minus"]},
    {"name": "yeardaynum$ebnf$1", "symbols": ["yeardaynum$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "yeardaynum$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "yeardaynum", "symbols": ["yeardaynum$ebnf$1", "ordyrday"], "postprocess": integer},
    {"name": "ordyrday$ebnf$1$subexpression$1$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "ordyrday$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordyrday$ebnf$1$subexpression$1", "symbols": ["DIGIT", "ordyrday$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "ordyrday$ebnf$1", "symbols": ["ordyrday$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ordyrday$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ordyrday", "symbols": ["DIGIT", "ordyrday$ebnf$1"], "postprocess": (data: any[]) => integer(flatten(data))},
    {"name": "bywknolist$ebnf$1", "symbols": []},
    {"name": "bywknolist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "weeknum"]},
    {"name": "bywknolist$ebnf$1", "symbols": ["bywknolist$ebnf$1", "bywknolist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bywknolist", "symbols": ["weeknum", "bywknolist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "weeknum$ebnf$1$subexpression$1", "symbols": ["plus"]},
    {"name": "weeknum$ebnf$1$subexpression$1", "symbols": ["minus"]},
    {"name": "weeknum$ebnf$1", "symbols": ["weeknum$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "weeknum$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "weeknum", "symbols": ["weeknum$ebnf$1", "ordwk"], "postprocess": (data: any[]) => integer(flatten(data))},
    {"name": "bymolist$ebnf$1", "symbols": []},
    {"name": "bymolist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "monthnum"]},
    {"name": "bymolist$ebnf$1", "symbols": ["bymolist$ebnf$1", "bymolist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bymolist", "symbols": ["monthnum", "bymolist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "monthnum$ebnf$1", "symbols": ["DIGIT"], "postprocess": id},
    {"name": "monthnum$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "monthnum", "symbols": ["DIGIT", "monthnum$ebnf$1"], "postprocess": (d: any) => (integer(d) - 1)},
    {"name": "bysplist$ebnf$1", "symbols": []},
    {"name": "bysplist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "setposday"]},
    {"name": "bysplist$ebnf$1", "symbols": ["bysplist$ebnf$1", "bysplist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bysplist", "symbols": ["setposday", "bysplist$ebnf$1"], "postprocess": (data: any[]) => [data[0]].concat(data[1].map((d: any) => d[1]))},
    {"name": "setposday", "symbols": ["yeardaynum"], "postprocess": (d: any) => d[0]},
    {"name": "ALPHA", "symbols": [/[\x41-\x5A]/]},
    {"name": "ALPHA", "symbols": [/[\x61-\x7A]/]},
    {"name": "DIGIT", "symbols": [/[\x30-\x39]/]},
    {"name": "DQUOTE", "symbols": [/[\x22]/]},
    {"name": "CRLF", "symbols": ["CR", "LF"]},
    {"name": "CR", "symbols": [/[\x0D]/]},
    {"name": "LF", "symbols": [/[\x0A]/]},
    {"name": "WSP", "symbols": ["SP"]},
    {"name": "WSP", "symbols": ["HTAB"]},
    {"name": "SP", "symbols": [/[\x20]/]},
    {"name": "HTAB", "symbols": [/[\x09]/]},
    {"name": "QSAFECHAR", "symbols": ["WSP"]},
    {"name": "QSAFECHAR", "symbols": [/[\x21]/]},
    {"name": "QSAFECHAR", "symbols": [/[\x23-\x7E]/]},
    {"name": "QSAFECHAR", "symbols": ["NONUSASCII"]},
    {"name": "SAFECHAR", "symbols": ["WSP"]},
    {"name": "SAFECHAR", "symbols": [/[\x21]/]},
    {"name": "SAFECHAR", "symbols": [/[\x23-\x2B]/]},
    {"name": "SAFECHAR", "symbols": [/[\x2D-\x39]/]},
    {"name": "SAFECHAR", "symbols": [/[\x3C-\x7E]/]},
    {"name": "NONUSASCII", "symbols": ["UTF82"]},
    {"name": "NONUSASCII", "symbols": ["UTF83"]},
    {"name": "NONUSASCII", "symbols": ["UTF84"]},
    {"name": "UTF82", "symbols": [/[\xC2-\xDF]/, "UTF8Tail"]},
    {"name": "UTF83", "symbols": [/[\xE0]/, /[\xA0-\xBF]/, "UTF8Tail"]},
    {"name": "UTF83", "symbols": [/[\xE1-\xEC]/, "UTF8Tail", "UTF8Tail"]},
    {"name": "UTF83", "symbols": [/[\xED]/, /[\x80-\x9F]/, "UTF8Tail"]},
    {"name": "UTF83", "symbols": [/[\xEE-\xEF]/, "UTF8Tail", "UTF8Tail"]},
    {"name": "UTF84", "symbols": [/[\xF0]/, /[\x90-\xBF]/, "UTF8Tail", "UTF8Tail"]},
    {"name": "UTF84", "symbols": [/[\xF1-\xF3]/, "UTF8Tail", "UTF8Tail", "UTF8Tail"]},
    {"name": "UTF84", "symbols": [/[\xF4]/, /[\x80-\x8F]/, "UTF8Tail", "UTF8Tail"]},
    {"name": "UTF8Tail", "symbols": [/[\x80-\xBF]/]}
]
export const ParserStart = "rrule";
